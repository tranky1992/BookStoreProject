package com.bookstore.dao;

import static org.junit.Assert.*;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.bookstore.entity.Book;
import com.bookstore.entity.Category;

public class BookDAOTest extends BaseDAOTest{

	private static BookDAO bookDAO;
	
	
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		BaseDAOTest.setUpBeforeClass();
		bookDAO = new BookDAO(entityManager);
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Test
	public void testUpdateBook() throws ParseException, IOException {
		Book existBook = new Book();
		existBook.setBookId(1);
		Category category = new Category("Kinh tế");
		category.setCategoryId(12);
		existBook.setCategory(category);
		
		existBook.setTitle("Những Kẻ Xuất Chúng");
		existBook.setAuthor("Malcolm Gladwell");
		existBook.setDescription("Bìa Mềm");
		existBook.setPrice(109.515f);
		existBook.setIsbn("8935251412949");
		
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date publishDate = dateFormat.parse("05/28/2019");
		existBook.setPublishDate(publishDate);
		
		String imagePath = "E:\\BookStoreProject\\Nhung ke xuat chung.jpg";
		byte[] imageBytes = Files.readAllBytes(Paths.get(imagePath));
		existBook.setImage(imageBytes);
		
		Book updateBook = bookDAO.update(existBook);
		assertEquals(updateBook.getTitle(), "Những Kẻ Xuất Chúng");
		
	}
	
	
	@Test
	public void testCreateBook() throws ParseException, IOException {
		Book newBook = new Book();
		
		Category category = new Category("Kinh tế");
		category.setCategoryId(11);
		newBook.setCategory(category);
		
		newBook.setTitle("Lịch sử lớp 12");
		newBook.setAuthor("Malcolm Gladwell");
		newBook.setDescription("Bìa Mềm");
		newBook.setPrice(109.515f);
		newBook.setIsbn("8935251412949");
		
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date publishDate = dateFormat.parse("05/28/2019");
		newBook.setPublishDate(publishDate);
		
		String imagePath = "E:\\BookStoreProject\\Nhung ke xuat chung.jpg";
		byte[] imageBytes = Files.readAllBytes(Paths.get(imagePath));
		newBook.setImage(imageBytes);
		
		Book createBook = bookDAO.create(newBook);
		assertTrue(createBook.getBookId() > 0);
		
	}
	
	@Test
	public void testCreate2ndBook() throws ParseException, IOException {
		Book newBook = new Book();
		
		Category category = new Category("Lịch sử");
		category.setCategoryId(11);
		newBook.setCategory(category);
		
		newBook.setTitle("Lịch sử lớp 12");
		newBook.setAuthor("Bộ Giáo Dục và Đào Tạo");
		newBook.setDescription("Lịch Sử Lớp 12 là một trong những cuốn sách giáo khoa cơ bản được do Bộ Giáo Dục & Đào Tạo tổ chức biên soạn.");
		newBook.setPrice(12.500f);
		newBook.setIsbn("0321356683");
		
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date publishDate = dateFormat.parse("05/28/2017");
		newBook.setPublishDate(publishDate);
		
		String imagePath = "E:\\BookStoreProject\\Lich su 12.jpg";
		byte[] imageBytes = Files.readAllBytes(Paths.get(imagePath));
		newBook.setImage(imageBytes);
		
		Book createBook = bookDAO.create(newBook);
		assertTrue(createBook.getBookId() > 0);
		
	}
	
	@Test(expected = EntityNotFoundException.class)
	public void testDeleteBookFail() {
		Integer bookId = 100;
		bookDAO.delete(bookId);
		
		
	}
	
	@Test
	public void testDeleteBookSuccess() {
		Integer bookId = 1;
		bookDAO.delete(bookId);
		
		assertTrue(true);
	}

	@Test
	public void testGetBookFail() {
		Integer bookId = 100;
		Book book = bookDAO.get(bookId);
		
		assertNull(book);
		
	}
	
	@Test
	public void testGetBookSuccess() {
		Integer bookId = 2;
		Book book = bookDAO.get(bookId);
		
		assertNotNull(book);
		
	}

	@Test
	public void testSearchBookInTitle() {
		String keyword = "Head First Java, 2nd Edition";
		List<Book> result = bookDAO.search(keyword);
		
		assertEquals(1, result.size());
		
	}
	
	@Test
	public void testListAll() {
		List<Book> listBooks = bookDAO.listAll();
		
		for (Book abook : listBooks) {
			System.out.println(abook.getTitle() + " - " + abook.getAuthor());
			
		}
		assertFalse(listBooks.isEmpty());
		
	}
	
	@Test
	public void testFindByTitleNotExist() {
		String title = "Thinkin in Java";
		Book book = bookDAO.findByTitle(title);
		
		assertNull(book);
	}
	
	@Test
	public void testFindByTitleExist() {
		String title = "Lịch sử lớp 12";
		Book book = bookDAO.findByTitle(title);
		
		System.out.println(book.getAuthor());
		System.out.println(book.getPrice());
		assertNotNull(book);
	}
	
	@Test
	public void testListNewBooks() {
		List<Book> listNewBooks = bookDAO.listNewBooks();
		
		for(Book abook : listNewBooks) {
			System.out.println(abook.getTitle() + "  " + abook.getPublishDate());
		}
		assertEquals(4, listNewBooks.size());
	}
	
	@Test
	public void testCount() {
		long totalBooks = bookDAO.count();
		
		assertEquals(2, totalBooks);
	}
	
	@Test
	public void testListByCategory() {
		int categoryId = 16;
		
		List<Book> listBooks = bookDAO.listByCategory(categoryId);
		assertTrue(listBooks.size() > 0);
	}
}
